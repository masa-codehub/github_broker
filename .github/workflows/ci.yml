name: CI

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review


permissions:
  issues: write
  contents: write

jobs:
  test:
    runs-on: [self-hosted] # ラベルは適宜調整してください
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      # Dockerイメージにインストール済みのため、このステップは不要
      # - name: Install system dependencies
      #  run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev lsb-release

      # actions/setup-python を使うことで、pipのキャッシュが効くようになります
      - name: Install system dependencies (curl)
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'
          cache: 'pip'
          cache-dependency-path: '**/pyproject.toml'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      # 毎回依存関係をインストールする
      - name: Install Python dependencies (including pre-commit hooks)
        run: pip install -e .[test,dev]
      - name: Run unified quality checks (lint, format, test, type-check)
        run: pre-commit run --all-files
      - name: Server startup test
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: "test"
          TESTING: true
          REDIS_HOST: localhost
          PATH: /usr/bin:$PATH # Add /usr/bin to PATH for curl
        run: |
          echo "Starting server startup test..."
          
          # Start the server in the background and log to a file
          python broker_main.py > server.log 2>&1 &
          SERVER_PID=$!
          
          echo "Server starting in background with PID: $SERVER_PID"
          
          # Monitor server startup using health check endpoint (max 20 seconds)
          timeout=20
          elapsed=0
          while ! curl -sf http://localhost:8000/health > /dev/null; do
            if [ $elapsed -ge $timeout ]; then
              echo "❌ Server health check timed out after $timeout seconds."
              echo "--- Server Log ---"
              cat server.log
              echo "--- End Log ---"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            sleep 1
            elapsed=$((elapsed + 1))
          done
          
          echo "✅ Server started successfully."
          echo "--- Server Log ---"
          cat server.log
          echo "--- End Log ---"

          # Stop the server
          echo "Stopping server..."
          kill $SERVER_PID
          # Wait up to 5 seconds for graceful shutdown
          for i in {1..5}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              break
            fi
            sleep 1
          done
          # If still running, force kill
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Process did not terminate after SIGTERM, sending SIGKILL..."
            kill -9 $SERVER_PID
          fi
          wait $SERVER_PID 2>/dev/null || true
          echo "✅ Server stopped successfully"
      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
